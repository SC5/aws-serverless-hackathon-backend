'use strict';

// tests for posts
// Generated by serverless-mocha-plugin

const mod = require('../posts/index');
const mochaPlugin = require('serverless-mocha-plugin');

const wrapper = mochaPlugin.lambdaWrapper;
const expect = mochaPlugin.chai.expect;

const wrapped = wrapper.wrap(mod, { handler: 'handler' });

describe('posts', () => {
  let post;
  it('creates a post', (done) => {
    wrapped.run({
      method: 'POST',
      body: {
        title: 'Test post',
        content: 'Test content',
      },
    }, (err, response) => {
      if (err) {
        return done(err);
      }

      post = response.post;
      expect(post.id).to.be.not.null;
      expect(err).to.be.null;
      return done();
    });
  });

  it('updates the post', (done) => {
    wrapped.run({
      method: 'PUT',
      path: {
        id: post.id,
      },
      body: {
        title: 'Test post edited',
        content: 'Test content edited',
        date: post.date,
      },
    }, (err, response) => {
      if (err) {
        return done(err);
      }

      post = response.post;
      expect(post.id).to.be.not.null;
      expect(err).to.be.null;
      return done();
    });
  });

  it('updates the post', (done) => {
    wrapped.run({
      method: 'GET',
    }, (err, response) => {
      if (err) {
        return done(err);
      }

      const createdPost = response.Items.filter(item => item.id === post.id)[0];
      expect(createdPost.id).to.be.equal(post.id);
      expect(createdPost.title).to.be.equal('Test post edited');
      expect(createdPost.content).to.be.equal('Test content edited');
      expect(createdPost.date).to.be.equal(post.date);
      expect(err).to.be.null;
      return done();
    });
  });

  it('deletes a post', (done) => {
    wrapped.run({
      method: 'DELETE',
      path: {
        id: post.id,
      },
    }, (err) => {
      expect(err).to.be.null;
      return done();
    });
  });
});
