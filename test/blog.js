'use strict';
// tests for posts
// Generated by serverless-mocha-plugin

const mod         = require('../blog/posts/handler.js');
const mochaPlugin = require('serverless-mocha-plugin');
const wrapper     = mochaPlugin.lambdaWrapper;
const expect      = mochaPlugin.chai.expect;

const liveFunction = {
  region: process.env.SERVERLESS_REGION,
  lambdaFunction: process.env.SERVERLESS_PROJECT + '-handler'
}

//  wrapper.init(liveFunction); // Run the deployed lambda 
wrapper.init(mod, {
  handler: 'handler'
});

describe('blog', () => {
  let postId;
  
  it('creates a post', (done) => {
    wrapper.run({ 
        "method": "POST", 
        "body": { 
          "title": "Test post", 
          "content" : "Test content" 
        }
    }, (err, response) => {
      expect(err).to.be.null;
      postId = response.post.id;
      expect(response.post.id).to.be.not.null;
      done();
    });
  });

  it('reads posts', (done) => {
    wrapper.run({ 
        "method": "GET"
    }, (err, response) => {
      expect(err).to.be.null;
      expect(response.Items).to.be.not.null;
      expect(response.Items.length > 0).to.be.true;
      // find our post
      let post = false;
      for (let idx in response.Items.length) {
        if (response.Items[idx].id == postId) {
          post = response.items[idx];
        }
      }
      expect(post).to.not.be.false;
      expect(post.title).to.be.equal("Test post");
      expect(content).to.be.equal("Test content");
      done();
    });
  });

  it('updates a post', (done) => {
    wrapper.run({ 
        "method": "PUT",
        "id": postId, 
        "body": { 
          "title": "Test post updated", 
          "content" : "Test content updated" 
        }
    }, (err, response) => {
      expect(err).to.be.null;
      expect(response.post.title).to.be.equal("Test post updated");
      expect(response.post.content).to.be.equal("Test content updated");
      done();
    });
  });
  
  it('deletes a post', (done) => {
    wrapper.run({ 
        "method": "DELETE", 
        "id": postId
    }, (err, response) => {
      expect(err).to.be.null;
      done();
    });
  });
});